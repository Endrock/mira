<div class="installments">
  <div class="container">
    <div class="installments-inner">
      <h2>Pay in 4 interest-free installmentsâ€”from $20.67/mo</h2>
      <button id="button-view-details" class="bf-add-cart-btn btn-custom button">View details</button>

      <div class="hidden">
        {%- assign product_form_installment_id = 'product-form-installment-' | append: section.id -%}
        {%- form 'product', product, id: product_form_installment_id, class: 'installment caption-large' -%}
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
          {{ form | payment_terms }}
        {%- endform -%}
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Installments",
  "settings": [],
  "presets": [
    {
      "name": "Installments"
    }
  ]
}
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

{% javascript %}
  document.getElementById('button-view-details').addEventListener('click', () => {
    let button = document
      .querySelector('shopify-payment-terms')
      .shadowRoot.querySelector('shop-pay-installments-banner')
      .shadowRoot.querySelector('#shopify-installments')
      .querySelector('#shopify-installments-cta');

    button.click();
  });

  const closeModal = () => {
    const paymentTermsModal = document.getElementById('shopify-payment-terms-cover');

    if (paymentTermsModal) {
      paymentTermsModal.addEventListener('click', (event) => {
        const clickedElement = event.target;

        const excludedTagName = 'shopify-installments-prequal-modal';

        if (!clickedElement.closest(excludedTagName)) {
          const closeButton = paymentTermsModal
            .querySelector('div shopify-installments-prequal-modal')
            ?.shadowRoot.querySelector('#shopify-payment-terms-modal button');

          if (closeButton) {
            closeButton.click();
          }
        }
      });
    }
  };

  const observeDOMChanges = () => {
    const targetNode = document.body;
    const config = { childList: true, subtree: true };

    const callback = (mutationsList, observer) => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'childList') {
          for (const node of mutation.addedNodes) {
            if (node.nodeType === Node.ELEMENT_NODE && node.id === 'shopify-payment-terms-cover') {
              closeModal();
            }
          }
        }
      }
    };

    const observer = new MutationObserver(callback);
    observer.observe(targetNode, config);
  };

  observeDOMChanges();
{% endjavascript %}
